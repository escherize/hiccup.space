;; Analyzed by ClojureScript 0.0-3291
{:use-macros nil, :excludes #{}, :name crate.binding, :imports nil, :requires {set clojure.set, clojure.set clojure.set}, :uses nil, :defs {bindable {:meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/binding.cljs", :line 152, :column 14, :end-line 152, :end-column 22, :doc nil, :protocol-symbol true, :protocol-info {:methods {-value [[this]], -on-change [[this func]]}}}, :protocol-symbol true, :name crate.binding/bindable, :file "resources/public/js/out/crate/binding.cljs", :end-column 22, :column 1, :line 152, :protocol-info {:methods {-value [[this]], -on-change [[this func]]}}, :info nil, :end-line 152, :impls #{crate.binding/atom-binding crate.binding/bound-collection}, :doc nil}, notify {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/binding.cljs", :line 147, :column 7, :end-line 147, :end-column 13, :arglists (quote ([w o v]))}, :name crate.binding/notify, :variadic false, :file "resources/public/js/out/crate/binding.cljs", :end-column 13, :method-params ([w o v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 147, :end-line 147, :max-fixed-arity 3, :fn-var true, :arglists (quote ([w o v]))}, ->bound-collection {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/binding.cljs", :line 172, :column 10, :end-line 172, :end-column 26, :protocols #{crate.binding/bindable crate.binding/bindable-coll}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([atm notif opts stuff]))}, :protocols #{crate.binding/bindable crate.binding/bindable-coll}, :name crate.binding/->bound-collection, :variadic false, :file "resources/public/js/out/crate/binding.cljs", :end-column 26, :method-params ([atm notif opts stuff]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 172, :end-line 172, :max-fixed-arity 4, :fn-var true, :arglists (quote ([atm notif opts stuff])), :skip-protocol-flag nil}, ->keyed {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/binding.cljs", :line 205, :column 7, :end-line 205, :end-column 14, :arglists (quote ([coll keyfn]))}, :name crate.binding/->keyed, :variadic false, :file "resources/public/js/out/crate/binding.cljs", :end-column 14, :method-params ([coll keyfn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 205, :end-line 205, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coll keyfn]))}, ->SubAtom {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/binding.cljs", :line 7, :column 10, :end-line 7, :end-column 17, :protocols #{cljs.core/IWatchable cljs.core/IEquiv cljs.core/IHash cljs.core/IDeref cljs.core/IPrintWithWriter}, :skip-protocol-flag #{cljs.core/IWatchable cljs.core/IEquiv cljs.core/IHash cljs.core/IDeref cljs.core/IPrintWithWriter}, :factory :positional, :arglists (quote ([atm path prevhash watches key]))}, :protocols #{cljs.core/IWatchable cljs.core/IEquiv cljs.core/IHash cljs.core/IDeref cljs.core/IPrintWithWriter}, :name crate.binding/->SubAtom, :variadic false, :file "resources/public/js/out/crate/binding.cljs", :end-column 17, :method-params ([atm path prevhash watches key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 7, :end-line 7, :max-fixed-arity 5, :fn-var true, :arglists (quote ([atm path prevhash watches key])), :skip-protocol-flag #{cljs.core/IWatchable cljs.core/IEquiv cljs.core/IHash cljs.core/IDeref cljs.core/IPrintWithWriter}}, bound-coll {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/binding.cljs", :line 222, :column 7, :end-line 222, :end-column 17, :arglists (quote ([atm & [path opts]])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(atm [path opts])], :arglists ([atm & [path opts]]), :arglists-meta (nil)}}, :name crate.binding/bound-coll, :variadic true, :file "resources/public/js/out/crate/binding.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(atm [path opts])], :arglists ([atm & [path opts]]), :arglists-meta (nil)}, :method-params [(atm [path opts])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 222, :end-line 222, :max-fixed-arity 1, :fn-var true, :arglists ([atm & [path opts]])}, on-change {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/binding.cljs", :line 268, :column 7, :end-line 268, :end-column 16, :arglists (quote ([b func]))}, :name crate.binding/on-change, :variadic false, :file "resources/public/js/out/crate/binding.cljs", :end-column 16, :method-params ([b func]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 268, :end-line 268, :max-fixed-arity 2, :fn-var true, :arglists (quote ([b func]))}, -on-change {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/binding.cljs", :line 154, :column 4, :end-line 154, :end-column 14, :protocol crate.binding/bindable, :doc "On change of this binding execute func", :arglists (quote ([this func]))}, :protocol crate.binding/bindable, :name crate.binding/-on-change, :variadic false, :file "resources/public/js/out/crate/binding.cljs", :end-column 14, :method-params ([this func]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 152, :end-line 154, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this func])), :doc "On change of this binding execute func"}, map-bound {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/binding.cljs", :line 239, :column 7, :end-line 239, :end-column 16, :arglists (quote ([as atm & [opts]])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(as atm [opts])], :arglists ([as atm & [opts]]), :arglists-meta (nil)}}, :name crate.binding/map-bound, :variadic true, :file "resources/public/js/out/crate/binding.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(as atm [opts])], :arglists ([as atm & [opts]]), :arglists-meta (nil)}, :method-params [(as atm [opts])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 239, :end-line 239, :max-fixed-arity 2, :fn-var true, :arglists ([as atm & [opts]])}, computable {:meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/binding.cljs", :line 87, :column 14, :end-line 87, :end-column 24, :doc nil, :protocol-symbol true, :protocol-info {:methods {-compute [[this]]}}}, :protocol-symbol true, :name crate.binding/computable, :file "resources/public/js/out/crate/binding.cljs", :end-column 24, :column 1, :line 87, :protocol-info {:methods {-compute [[this]]}}, :info nil, :end-line 87, :impls #{crate.binding/Computed}, :doc nil}, subatom {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/binding.cljs", :line 32, :column 7, :end-line 32, :end-column 14, :arglists (quote ([atm path]))}, :name crate.binding/subatom, :variadic false, :file "resources/public/js/out/crate/binding.cljs", :end-column 14, :method-params ([atm path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 2, :fn-var true, :arglists (quote ([atm path]))}, opt {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/binding.cljs", :line 182, :column 7, :end-line 182, :end-column 10, :arglists (quote ([bc k]))}, :name crate.binding/opt, :variadic false, :file "resources/public/js/out/crate/binding.cljs", :end-column 10, :method-params ([bc k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 182, :end-line 182, :max-fixed-arity 2, :fn-var true, :arglists (quote ([bc k]))}, bc-remove {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/binding.cljs", :line 192, :column 8, :end-line 192, :end-column 17, :private true, :arglists (quote ([bc key]))}, :private true, :name crate.binding/bc-remove, :variadic false, :file "resources/public/js/out/crate/binding.cljs", :end-column 17, :method-params ([bc key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 192, :end-line 192, :max-fixed-arity 2, :fn-var true, :arglists (quote ([bc key]))}, atom-binding {:num-fields 2, :protocols #{crate.binding/bindable}, :name crate.binding/atom-binding, :file "resources/public/js/out/crate/binding.cljs", :end-column 22, :type true, :column 10, :line 156, :record false, :end-line 156, :skip-protocol-flag nil}, y {:name crate.binding/y, :file "resources/public/js/out/crate/binding.cljs", :line 133, :column 1, :end-line 133, :end-column 7, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/binding.cljs", :line 133, :column 6, :end-line 133, :end-column 7}}, ->path {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/binding.cljs", :line 208, :column 7, :end-line 208, :end-column 13, :arglists (quote ([bc & segs])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(bc segs)], :arglists ([bc & segs]), :arglists-meta (nil)}}, :name crate.binding/->path, :variadic true, :file "resources/public/js/out/crate/binding.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(bc segs)], :arglists ([bc & segs]), :arglists-meta (nil)}, :method-params [(bc segs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 208, :end-line 208, :max-fixed-arity 1, :fn-var true, :arglists ([bc & segs])}, bindable-coll {:meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/binding.cljs", :line 150, :column 14, :end-line 150, :end-column 27, :doc nil, :protocol-symbol true, :protocol-info {:methods {}}}, :protocol-symbol true, :name crate.binding/bindable-coll, :file "resources/public/js/out/crate/binding.cljs", :end-column 27, :column 1, :line 150, :protocol-info {:methods {}}, :info nil, :end-line 150, :impls #{crate.binding/bound-collection}, :doc nil}, r {:name crate.binding/r, :file "resources/public/js/out/crate/binding.cljs", :line 136, :column 1, :end-line 136, :end-column 7, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/binding.cljs", :line 136, :column 6, :end-line 136, :end-column 7}}, bc-compare {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/binding.cljs", :line 211, :column 8, :end-line 211, :end-column 18, :private true, :arglists (quote ([bc neue]))}, :private true, :name crate.binding/bc-compare, :variadic false, :file "resources/public/js/out/crate/binding.cljs", :end-column 18, :method-params ([bc neue]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 211, :end-line 211, :max-fixed-arity 2, :fn-var true, :arglists (quote ([bc neue]))}, sub-reset! {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/binding.cljs", :line 55, :column 7, :end-line 55, :end-column 17, :arglists (quote ([sa new-value])), :doc "Sets the value of atom to newval without regard for the\n  current value. Returns newval."}, :name crate.binding/sub-reset!, :variadic false, :file "resources/public/js/out/crate/binding.cljs", :end-column 17, :method-params ([sa new-value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 2, :fn-var true, :arglists (quote ([sa new-value])), :doc "Sets the value of atom to newval without regard for the\n  current value. Returns newval."}, index {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/binding.cljs", :line 265, :column 7, :end-line 265, :end-column 12, :arglists (quote ([sub-atom]))}, :name crate.binding/index, :variadic false, :file "resources/public/js/out/crate/binding.cljs", :end-column 12, :method-params ([sub-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 265, :end-line 265, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sub-atom]))}, computed {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/binding.cljs", :line 122, :column 7, :end-line 122, :end-column 15, :arglists (quote ([atms func]))}, :name crate.binding/computed, :variadic false, :file "resources/public/js/out/crate/binding.cljs", :end-column 15, :method-params ([atms func]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 122, :end-line 122, :max-fixed-arity 2, :fn-var true, :arglists (quote ([atms func]))}, bound-collection {:num-fields 4, :protocols #{crate.binding/bindable crate.binding/bindable-coll}, :name crate.binding/bound-collection, :file "resources/public/js/out/crate/binding.cljs", :end-column 26, :type true, :column 10, :line 172, :record false, :end-line 172, :skip-protocol-flag nil}, ->indexed {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/binding.cljs", :line 199, :column 7, :end-line 199, :end-column 16, :arglists (quote ([coll]))}, :name crate.binding/->indexed, :variadic false, :file "resources/public/js/out/crate/binding.cljs", :end-column 16, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 199, :end-line 199, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll]))}, Computed {:num-fields 5, :protocols #{cljs.core/IWatchable crate.binding/computable cljs.core/IEquiv cljs.core/IHash cljs.core/IDeref cljs.core/IPrintWithWriter}, :name crate.binding/Computed, :file "resources/public/js/out/crate/binding.cljs", :end-column 18, :type true, :column 10, :line 90, :record false, :end-line 90, :skip-protocol-flag #{cljs.core/IWatchable cljs.core/IEquiv cljs.core/IHash cljs.core/IDeref cljs.core/IPrintWithWriter}}, SubAtom {:num-fields 5, :protocols #{cljs.core/IWatchable cljs.core/IEquiv cljs.core/IHash cljs.core/IDeref cljs.core/IPrintWithWriter}, :name crate.binding/SubAtom, :file "resources/public/js/out/crate/binding.cljs", :end-column 17, :type true, :column 10, :line 7, :record false, :end-line 7, :skip-protocol-flag #{cljs.core/IWatchable cljs.core/IEquiv cljs.core/IHash cljs.core/IDeref cljs.core/IPrintWithWriter}}, value {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/binding.cljs", :line 262, :column 7, :end-line 262, :end-column 12, :arglists (quote ([b]))}, :name crate.binding/value, :variadic false, :file "resources/public/js/out/crate/binding.cljs", :end-column 12, :method-params ([b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 262, :end-line 262, :max-fixed-arity 1, :fn-var true, :arglists (quote ([b]))}, sub-destroy! {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/binding.cljs", :line 78, :column 7, :end-line 78, :end-column 19, :arglists (quote ([sa]))}, :name crate.binding/sub-destroy!, :variadic false, :file "resources/public/js/out/crate/binding.cljs", :end-column 19, :method-params ([sa]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sa]))}, deref? {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/binding.cljs", :line 259, :column 7, :end-line 259, :end-column 13, :arglists (quote ([atm]))}, :name crate.binding/deref?, :variadic false, :file "resources/public/js/out/crate/binding.cljs", :end-column 13, :method-params ([atm]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 259, :end-line 259, :max-fixed-arity 1, :fn-var true, :arglists (quote ([atm]))}, ->atom-binding {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/binding.cljs", :line 156, :column 10, :end-line 156, :end-column 22, :protocols #{crate.binding/bindable}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([atm value-func]))}, :protocols #{crate.binding/bindable}, :name crate.binding/->atom-binding, :variadic false, :file "resources/public/js/out/crate/binding.cljs", :end-column 22, :method-params ([atm value-func]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 156, :end-line 156, :max-fixed-arity 2, :fn-var true, :arglists (quote ([atm value-func])), :skip-protocol-flag nil}, binding-coll? {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/binding.cljs", :line 256, :column 7, :end-line 256, :end-column 20, :arglists (quote ([b]))}, :name crate.binding/binding-coll?, :variadic false, :file "resources/public/js/out/crate/binding.cljs", :end-column 20, :method-params ([b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 256, :end-line 256, :max-fixed-arity 1, :fn-var true, :arglists (quote ([b]))}, z {:name crate.binding/z, :file "resources/public/js/out/crate/binding.cljs", :line 131, :column 1, :end-line 131, :end-column 7, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/binding.cljs", :line 131, :column 6, :end-line 131, :end-column 7}}, bc-add {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/binding.cljs", :line 185, :column 8, :end-line 185, :end-column 14, :private true, :arglists (quote ([bc path key]))}, :private true, :name crate.binding/bc-add, :variadic false, :file "resources/public/js/out/crate/binding.cljs", :end-column 14, :method-params ([bc path key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 185, :end-line 185, :max-fixed-arity 3, :fn-var true, :arglists (quote ([bc path key]))}, bound {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/binding.cljs", :line 271, :column 7, :end-line 271, :end-column 12, :arglists (quote ([atm & [func]])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(atm [func])], :arglists ([atm & [func]]), :arglists-meta (nil)}}, :name crate.binding/bound, :variadic true, :file "resources/public/js/out/crate/binding.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(atm [func])], :arglists ([atm & [func]]), :arglists-meta (nil)}, :method-params [(atm [func])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 271, :end-line 271, :max-fixed-arity 1, :fn-var true, :arglists ([atm & [func]])}, -value {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/binding.cljs", :line 153, :column 4, :end-line 153, :end-column 10, :protocol crate.binding/bindable, :doc "get the current value of this binding", :arglists (quote ([this]))}, :protocol crate.binding/bindable, :name crate.binding/-value, :variadic false, :file "resources/public/js/out/crate/binding.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 152, :end-line 153, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "get the current value of this binding"}, ->Computed {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/binding.cljs", :line 90, :column 10, :end-line 90, :end-column 18, :protocols #{cljs.core/IWatchable crate.binding/computable cljs.core/IEquiv cljs.core/IHash cljs.core/IDeref cljs.core/IPrintWithWriter}, :skip-protocol-flag #{cljs.core/IWatchable cljs.core/IEquiv cljs.core/IHash cljs.core/IDeref cljs.core/IPrintWithWriter}, :factory :positional, :arglists (quote ([atms value func watches key]))}, :protocols #{cljs.core/IWatchable crate.binding/computable cljs.core/IEquiv cljs.core/IHash cljs.core/IDeref cljs.core/IPrintWithWriter}, :name crate.binding/->Computed, :variadic false, :file "resources/public/js/out/crate/binding.cljs", :end-column 18, :method-params ([atms value func watches key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 90, :end-line 90, :max-fixed-arity 5, :fn-var true, :arglists (quote ([atms value func watches key])), :skip-protocol-flag #{cljs.core/IWatchable cljs.core/IEquiv cljs.core/IHash cljs.core/IDeref cljs.core/IPrintWithWriter}}, sub-swap! {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/binding.cljs", :line 62, :column 7, :end-line 62, :end-column 16, :arglists (quote ([sa f] [sa f x] [sa f x y] [sa f x y z] [sa f x y z & more])), :doc "Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.", :top-fn {:variadic true, :max-fixed-arity 5, :method-params ([sa f] [sa f x] [sa f x y] [sa f x y z]), :arglists ([sa f] [sa f x] [sa f x y] [sa f x y z] [sa f x y z & more]), :arglists-meta (nil nil nil nil nil)}}, :name crate.binding/sub-swap!, :variadic true, :file "resources/public/js/out/crate/binding.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 5, :method-params ([sa f] [sa f x] [sa f x y] [sa f x y z]), :arglists ([sa f] [sa f x] [sa f x y] [sa f x y z] [sa f x y z & more]), :arglists-meta (nil nil nil nil nil)}, :method-params ([sa f] [sa f x] [sa f x y] [sa f x y z]), :protocol-impl nil, :arglists-meta (nil nil nil nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 5, :fn-var true, :arglists ([sa f] [sa f x] [sa f x y] [sa f x y z] [sa f x y z & more]), :doc "Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in."}, binding? {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/binding.cljs", :line 253, :column 7, :end-line 253, :end-column 15, :arglists (quote ([b]))}, :name crate.binding/binding?, :variadic false, :file "resources/public/js/out/crate/binding.cljs", :end-column 15, :method-params ([b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 253, :end-line 253, :max-fixed-arity 1, :fn-var true, :arglists (quote ([b]))}, -compute {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/binding.cljs", :line 88, :column 4, :end-line 88, :end-column 12, :protocol crate.binding/computable, :doc "compute the latest value", :arglists (quote ([this]))}, :protocol crate.binding/computable, :name crate.binding/-compute, :variadic false, :file "resources/public/js/out/crate/binding.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 88, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "compute the latest value"}, notifier {:num-fields 1, :protocols #{cljs.core/IWatchable}, :name crate.binding/notifier, :file "resources/public/js/out/crate/binding.cljs", :end-column 18, :type true, :column 10, :line 162, :record false, :end-line 162, :skip-protocol-flag #{cljs.core/IWatchable}}, ->notifier {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/binding.cljs", :line 162, :column 10, :end-line 162, :end-column 18, :protocols #{cljs.core/IWatchable}, :skip-protocol-flag #{cljs.core/IWatchable}, :factory :positional, :arglists (quote ([watches]))}, :protocols #{cljs.core/IWatchable}, :name crate.binding/->notifier, :variadic false, :file "resources/public/js/out/crate/binding.cljs", :end-column 18, :method-params ([watches]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 162, :end-line 162, :max-fixed-arity 1, :fn-var true, :arglists (quote ([watches])), :skip-protocol-flag #{cljs.core/IWatchable}}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:path :remove :else :as :keyfn :elem :add :subatom}, :order [:elem :as :subatom :add :remove :else :path :keyfn]}, :doc nil}