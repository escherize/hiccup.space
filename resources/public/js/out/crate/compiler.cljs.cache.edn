;; Analyzed by ClojureScript 0.0-3291
{:use-macros nil, :excludes #{}, :name crate.compiler, :imports nil, :requires {gdom goog.dom, goog.dom goog.dom, gstyle goog.style, goog.style goog.style, string clojure.string, clojure.string clojure.string, bind crate.binding, crate.binding crate.binding}, :uses nil, :defs {normalize-map-attrs {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/compiler.cljs", :line 127, :column 8, :end-line 127, :end-column 27, :private true, :arglists (quote ([map-attrs]))}, :private true, :name crate.compiler/normalize-map-attrs, :variadic false, :file "resources/public/js/out/crate/compiler.cljs", :end-column 27, :method-params ([map-attrs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 127, :end-line 127, :max-fixed-arity 1, :fn-var true, :arglists (quote ([map-attrs]))}, re-tag {:name crate.compiler/re-tag, :file "resources/public/js/out/crate/compiler.cljs", :line 124, :column 1, :end-line 125, :end-column 9, :doc "Regular expression that parses a CSS-style id and class from a tag name.", :private true, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/compiler.cljs", :line 125, :column 3, :end-line 125, :end-column 9, :doc "Regular expression that parses a CSS-style id and class from a tag name.", :private true}}, dom-attr {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/compiler.cljs", :line 103, :column 7, :end-line 103, :end-column 15, :arglists (quote ([elem attrs] [elem k v])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([elem attrs] [elem k v]), :arglists ([elem attrs] [elem k v]), :arglists-meta (nil nil)}}, :name crate.compiler/dom-attr, :variadic false, :file "resources/public/js/out/crate/compiler.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([elem attrs] [elem k v]), :arglists ([elem attrs] [elem k v]), :arglists-meta (nil nil)}, :method-params ([elem attrs] [elem k v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 3, :fn-var true, :arglists ([elem attrs] [elem k v])}, add-optional-attrs {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/compiler.cljs", :line 175, :column 7, :end-line 175, :end-column 25, :arglists (quote ([func])), :doc "Add an optional attribute argument to a function that returns a vector tag."}, :name crate.compiler/add-optional-attrs, :variadic false, :file "resources/public/js/out/crate/compiler.cljs", :end-column 25, :method-params ([func]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 1, :fn-var true, :arglists (quote ([func])), :doc "Add an optional attribute argument to a function that returns a vector tag."}, dom-style {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/compiler.cljs", :line 85, :column 7, :end-line 85, :end-column 16, :arglists (quote ([elem v] [elem k v])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([elem v] [elem k v]), :arglists ([elem v] [elem k v]), :arglists-meta (nil nil)}}, :name crate.compiler/dom-style, :variadic false, :file "resources/public/js/out/crate/compiler.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([elem v] [elem k v]), :arglists ([elem v] [elem k v]), :arglists-meta (nil nil)}, :method-params ([elem v] [elem k v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 3, :fn-var true, :arglists ([elem v] [elem k v])}, dom-binding {:name crate.compiler/dom-binding, :file "resources/public/js/out/crate/compiler.cljs", :line 45, :column 1, :end-line 45, :end-column 22, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/compiler.cljs", :line 45, :column 11, :end-line 45, :end-column 22}}, create-elem {:name crate.compiler/create-elem, :file "resources/public/js/out/crate/compiler.cljs", :line 160, :column 1, :end-line 160, :end-column 17, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/compiler.cljs", :line 160, :column 6, :end-line 160, :end-column 17}}, elem-factory {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/compiler.cljs", :line 166, :column 7, :end-line 166, :end-column 19, :arglists (quote ([tag-def]))}, :name crate.compiler/elem-factory, :variadic false, :file "resources/public/js/out/crate/compiler.cljs", :end-column 19, :method-params ([tag-def]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 166, :end-line 166, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tag-def]))}, dom-remove {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/compiler.cljs", :line 66, :column 7, :end-line 66, :end-column 17, :arglists (quote ([bc elem]))}, :name crate.compiler/dom-remove, :variadic false, :file "resources/public/js/out/crate/compiler.cljs", :end-column 17, :method-params ([bc elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 2, :fn-var true, :arglists (quote ([bc elem]))}, parse-content {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/compiler.cljs", :line 152, :column 7, :end-line 152, :end-column 20, :arglists (quote ([elem content]))}, :name crate.compiler/parse-content, :variadic false, :file "resources/public/js/out/crate/compiler.cljs", :end-column 20, :method-params ([elem content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 152, :end-line 152, :max-fixed-arity 2, :fn-var true, :arglists (quote ([elem content]))}, group-id {:name crate.compiler/group-id, :file "resources/public/js/out/crate/compiler.cljs", :line 15, :column 1, :end-line 15, :end-column 14, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/compiler.cljs", :line 15, :column 6, :end-line 15, :end-column 14}}, dom-add {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/compiler.cljs", :line 61, :column 7, :end-line 61, :end-column 14, :arglists (quote ([bc parent elem v]))}, :name crate.compiler/dom-add, :variadic false, :file "resources/public/js/out/crate/compiler.cljs", :end-column 14, :method-params ([bc parent elem v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 4, :fn-var true, :arglists (quote ([bc parent elem v]))}, capture-binding {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/compiler.cljs", :line 24, :column 7, :end-line 24, :end-column 22, :arglists (quote ([tag b]))}, :name crate.compiler/capture-binding, :variadic false, :file "resources/public/js/out/crate/compiler.cljs", :end-column 22, :method-params ([tag b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tag b]))}, bindings {:name crate.compiler/bindings, :file "resources/public/js/out/crate/compiler.cljs", :line 22, :column 1, :end-line 22, :end-column 24, :dynamic true, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/compiler.cljs", :line 22, :column 16, :end-line 22, :end-column 24, :dynamic true}}, normalize-element {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/compiler.cljs", :line 132, :column 8, :end-line 132, :end-column 25, :private true, :arglists (quote ([[tag & content]])), :doc "Ensure a tag vector is of the form [tag-name attrs content]."}, :private true, :name crate.compiler/normalize-element, :variadic false, :file "resources/public/js/out/crate/compiler.cljs", :end-column 25, :method-params ([p__33297]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 132, :end-line 132, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[tag & content]])), :doc "Ensure a tag vector is of the form [tag-name attrs content]."}, handle-bindings {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/compiler.cljs", :line 77, :column 7, :end-line 77, :end-column 22, :arglists (quote ([bs elem]))}, :name crate.compiler/handle-bindings, :variadic false, :file "resources/public/js/out/crate/compiler.cljs", :end-column 22, :method-params ([bs elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 2, :fn-var true, :arglists (quote ([bs elem]))}, xmlns {:name crate.compiler/xmlns, :file "resources/public/js/out/crate/compiler.cljs", :line 7, :column 1, :end-line 7, :end-column 11, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/compiler.cljs", :line 7, :column 6, :end-line 7, :end-column 11}}, as-content {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/compiler.cljs", :line 27, :column 7, :end-line 27, :end-column 17, :arglists (quote ([parent content]))}, :name crate.compiler/as-content, :variadic false, :file "resources/public/js/out/crate/compiler.cljs", :end-column 17, :method-params ([parent content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 2, :fn-var true, :arglists (quote ([parent content]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:remove :else :default :coll :style :id :class :svg :xhtml :add :hierarchy :text :attr}, :order [:xhtml :svg :coll :text :else :hierarchy :default :attr :style :add :remove :id :class]}, :doc nil}