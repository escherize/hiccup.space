;; Analyzed by ClojureScript 0.0-3291
{:name crate.util, :doc nil, :excludes #{}, :use-macros nil, :require-macros nil, :uses nil, :requires {str clojure.string, clojure.string clojure.string}, :imports nil, :defs {*base-url* {:name crate.util/*base-url*, :file "resources/public/js/out/crate/util.cljs", :line 4, :column 1, :end-line 4, :end-column 26, :dynamic true, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/util.cljs", :line 4, :column 16, :end-line 4, :end-column 26, :dynamic true}}, as-str {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/util.cljs", :line 6, :column 7, :end-line 6, :end-column 13, :arglists (quote ([] [x] [x & xs])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params ([] [x]), :arglists ([] [x] [x & xs]), :arglists-meta (nil nil nil)}}, :name crate.util/as-str, :variadic true, :file "resources/public/js/out/crate/util.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params ([] [x]), :arglists ([] [x] [x & xs]), :arglists-meta (nil nil nil)}, :method-params ([] [x]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists ([] [x] [x & xs])}, escape-html {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/util.cljs", :line 20, :column 7, :end-line 20, :end-column 18, :arglists (quote ([text])), :doc "Change special characters into HTML character entities."}, :name crate.util/escape-html, :variadic false, :file "resources/public/js/out/crate/util.cljs", :end-column 18, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text])), :doc "Change special characters into HTML character entities."}, to-uri {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/util.cljs", :line 29, :column 7, :end-line 29, :end-column 13, :arglists (quote ([uri])), :doc "Prepends the base-url to the supplied URI."}, :name crate.util/to-uri, :variadic false, :file "resources/public/js/out/crate/util.cljs", :end-column 13, :method-params ([uri]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([uri])), :doc "Prepends the base-url to the supplied URI."}, url-encode-component {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/util.cljs", :line 36, :column 7, :end-line 36, :end-column 27, :arglists (quote ([s]))}, :name crate.util/url-encode-component, :variadic false, :file "resources/public/js/out/crate/util.cljs", :end-column 27, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, url-encode {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/util.cljs", :line 40, :column 7, :end-line 40, :end-column 17, :arglists (quote ([params])), :doc "Turn a map of parameters into a urlencoded string."}, :name crate.util/url-encode, :variadic false, :file "resources/public/js/out/crate/util.cljs", :end-column 17, :method-params ([params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([params])), :doc "Turn a map of parameters into a urlencoded string."}, url {:protocol-inline nil, :meta {:file "/Users/bcm/dv/hiccup-repl/resources/public/js/out/crate/util.cljs", :line 47, :column 7, :end-line 47, :end-column 10, :arglists (quote ([& args])), :doc "Creates a URL string from a variable list of arguments and an optional\n  parameter map as the last argument. For example:\n    (url \"/group/\" 4 \"/products\" {:page 9})\n    => \"/group/4/products?page=9\"", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name crate.util/url, :variadic true, :file "resources/public/js/out/crate/util.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Creates a URL string from a variable list of arguments and an optional\n  parameter map as the last argument. For example:\n    (url \"/group/\" 4 \"/products\" {:page 9})\n    => \"/group/4/products?page=9\""}}}